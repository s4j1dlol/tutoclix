local private = {} -- { do NOT touch this, it holds all the functions in the source.}

getgenv().enabled = true
getgenv().key = Enum.KeyCode.C
getgenv().prediction = {0.13544, 0.13544, 0.13544}
getgenv().lookat = false -- Ajout de la variable pour activer/désactiver le "look at"
getgenv().lookatkey = Enum.KeyCode.F -- Touche F pour activer/désactiver le "look at"

local List = {
    [16469595315] = {'Del Hood Aim', 'UpdateMousePos', 'MainEvent'},
    [17319408836] = {'OG Da Hood', 'UpdateMousePos', 'MainEvent'},
    [14975320521] = {'Ar Hood', 'UpdateMousePos', 'MainEvent'},
    [17200018150] = {'Hood Of AR', 'UpdateMousePos', 'MainEvent'},
    [15644861772] = {'Flame Hood', 'UpdatQeMousePos', 'MainEvent'},
    [17723797487] = {'Dee Hood', 'UpdateMousePosI', 'MainEvent'},
    [17897702920] = {'Og Da Hood', 'UpdateMousePos', 'MainEvent'},
    [17809101348] = {'New Hood', 'UpdateMousePos', 'MainEvent'},
    [17344804827] = {'Yeno Hood', 'UpdateMousePos', 'MainEvent'},
    [16435867341] = {'Mad Hood', 'UpdateMousePos', 'MainEvent'},
    [14412601883] = {'Hood Bank', 'MOUSE', 'MAINEVENT'},
    [14412436145] = {'Da Uphill', 'MOUSE', 'MAINEVENT'},
    [14487637618] = {'Da Hood Bot Aim Trainer', 'MOUSE', 'MAINEVENT'},
    [11143225577] = {'1v1 Hood Aim Trainer', 'UpdateMousePos', 'MainEvent'},
    [14413712255] = {'Hood Aim', 'MOUSE', 'MAINEVENT'},
    [12927359803] = {'Dah Aim Trainer', 'UpdateMousePos', 'MainEvent'},
    [12867571492] = {'Katana Hood', 'UpdateMousePos', 'MainEvent'},
    [11867820563] = {'Dae Hood', 'UpdateMousePos', 'MainEvent'},
    [17109142105] = {'Da Battles', 'MoonUpdateMousePos', 'MainEvent'},
    [15186202290] = {'Da Strike', 'MOUSE', 'MAINEVENT'},
    [2788229376] = {'Da Hood', 'UpdateMousePosI', 'MainEvent'},
    [16033173781] = {'Da Hood Macro', 'UpdateMousePosI', 'MainEvent'},
    [7213786345] = {'Da Hood VC', 'UpdateMousePosI', 'MainEvent'},
    [9825515356] = {'Hood Customs', 'MousePosUpdate', 'MainEvent'},
    [17895632819] = {'Hood Spirit', 'UpdateMousePos', 'MainEvent'},
    [5602055394] = {'Hood Modded', 'MousePos', 'Bullets'},
    [7951883376] = {'Hood Modded VC', 'MousePos', 'Bullets'},
    [9183932460] = {'Untitled Hood', 'UpdateMousePos', '.gg/untitledhood'},
    [14412355918] = {'Da Downhill', 'MOUSE', 'MAINEVENT'}
}

private.variables = {
    players = game:GetService('Players'),
    client = game:GetService('Players').LocalPlayer,
    workspace = game:GetService('Workspace'),
    service = game:GetService('RunService'),
    input = game:GetService('UserInputService'),
    camera = game:GetService('Workspace').CurrentCamera
}

-- Création d'une instance Highlight pour le contour violet
private.highlight = Instance.new("Highlight")
private.highlight.FillTransparency = 1 -- Pas de remplissage, juste le contour
private.highlight.OutlineColor = Color3.fromRGB(128, 0, 128) -- Couleur violette
private.highlight.OutlineTransparency = 0 -- Contour complètement visible
private.highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- S'assure que le contour est visible même à travers les murs
private.highlight.Parent = game.CoreGui -- On le place dans CoreGui pour qu'il soit visible

-- Fonction pour mettre à jour le contour
private.updateHighlight = function(target)
    if target and target.Character then
        -- Vérifie que le personnage existe et a toutes ses parties
        local character = target.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            private.highlight.Adornee = character -- Applique le contour à l'ensemble du personnage
        else
            private.highlight.Adornee = nil -- Supprime le contour si le personnage n'est pas valide
        end
    else
        private.highlight.Adornee = nil -- Supprime le contour si aucun joueur n'est ciblé
    end
end

private.getplayer = function()
    local Radius = 500
    local MousePos = private.variables.input:GetMouseLocation()
    local Target

    for _, Player in pairs(private.variables.players:GetPlayers()) do
        if Player ~= private.variables.client and Player.Character then
            local Viewport = private.variables.camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position)

            if Radius > (Vector2.new(Viewport.X, Viewport.Y) - MousePos).Magnitude and private.variables.camera:WorldToScreenPoint(Player.Character.HumanoidRootPart.Position) then
                Radius = (Vector2.new(Viewport.X, Viewport.Y) - MousePos).Magnitude
                Target = Player
            end
        end
    end
    return Target
end

-- Gestion de l'appui sur les touches (C pour le ciblage, F pour le "look at")
private.variables.input.InputBegan:Connect(function(Key)
    if Key.KeyCode == getgenv().key then
        private.Targetting = not private.Targetting
        private.Target = private.Targetting and private.getplayer() or nil
        private.updateHighlight(private.Target) -- Met à jour le contour quand on appuie sur C
    elseif Key.KeyCode == getgenv().lookatkey then
        getgenv().lookat = not getgenv().lookat -- Bascule l'état du "look at" quand on appuie sur F
    end
end)

-- Fonction pour faire tourner la caméra vers le joueur ciblé
private.lookAtTarget = function()
    if getgenv().lookat and private.Target and private.Target.Character and private.Target.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = private.Target.Character.HumanoidRootPart.Position
        local cameraCFrame = CFrame.new(private.variables.camera.CFrame.Position, targetPosition)
        private.variables.camera.CFrame = cameraCFrame -- Oriente la caméra vers le joueur ciblé
    end
end

-- Appelle la fonction "lookAtTarget" à chaque frame si "lookat" est activé
private.variables.service.RenderStepped:Connect(function()
    if getgenv().lookat then
        private.lookAtTarget()
    end
end)

private.bullethooker = function()
    if List[game.PlaceId] and private.Target and private.Target.Character and private.Target.Character:FindFirstChild('HumanoidRootPart') then
        game.ReplicatedStorage[List[game.PlaceId][3]]:FireServer(List[game.PlaceId][2], private.Target.Character.HumanoidRootPart.Position + Vector3.new(private.Target.Character.HumanoidRootPart.Velocity.X * getgenv().prediction[1], private.Target.Character.HumanoidRootPart.Velocity.Y * getgenv().prediction[2], private.Target.Character.HumanoidRootPart.Velocity.Z * getgenv().prediction[3]))
    end
end

private.connection = function(Character)
    Character.ChildAdded:Connect(function(Tool)
        if Tool:IsA('Tool') then
            Tool.Activated:Connect(private.bullethooker)
        end
    end)
end

private.variables.client.CharacterAdded:Connect(private.connection)
private.connection(private.variables.client.Character)

-- Nettoyage du contour si le joueur ciblé quitte ou change de personnage
private.variables.players.PlayerRemoving:Connect(function(player)
    if player == private.Target then
        private.Target = nil
        private.Targetting = false
        private.updateHighlight(nil) -- Supprime le contour si le joueur ciblé quitte
    end
end)

-- Surveille les changements de personnage (par exemple, si le joueur ciblé meurt et réapparaît)
for _, player in pairs(private.variables.players:GetPlayers()) do
    if player ~= private.variables.client then
        player.CharacterAdded:Connect(function(character)
            if player == private.Target then
                private.updateHighlight(private.Target) -- Met à jour le contour si le personnage change
            end
        end)
    end
end

-- Gère les nouveaux joueurs qui rejoignent
private.variables.players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        if player == private.Target then
            private.updateHighlight(private.Target) -- Met à jour le contour si le personnage change
        end
    end)
end)
